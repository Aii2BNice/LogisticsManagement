package com.neusoft.system.user.controller;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.neusoft.system.power.model.Power;
import com.neusoft.system.power.service.PowerService;
import com.neusoft.system.user.model.Message;
import com.neusoft.system.user.model.User;
import com.neusoft.system.user.service.UserService;

/**
 * 用户相关Controller
 * 
 * @author DYQ
 *
 */
@Controller
public class UserController {

	@Autowired
	private UserService service;
	@Autowired
	private PowerService powerService;

	/**
	 * 登陆验证֤
	 * @param req
	 * @param user
	 * @return
	 */
	@RequestMapping("/login")
	public String login(HttpServletRequest req, User user) {
		String url = "/login.jsp";
		// 验证码--begin
		String code = (String) req.getSession().getAttribute("code");
		if (!user.getValidCode().equalsIgnoreCase(code)) {
			req.setAttribute("msg", "验证码输入错误！");
			return url;
		}
		// 验证码--end
		User u = service.login(user);
		if (u != null) {
			//登陆成功根据不同权限跳转不同页面
			switch (u.getPowerId()) {
			case 2:url = "/customer/main/main.jsp";break;
			case 3:url = "/ddzx/main/main.jsp";break;
			case 4:url = "/fzgl/main/main.jsp";break;
			case 5:url = "/depotmanage/main/main.jsp";break;
			case 6:url = "/pszxgl/main/main.jsp";break;
			case 7:url = "/finance/main/main.jsp";break;
			case 8:url = "/system/main/main.jsp";break;
			}
			req.getSession().setAttribute("user", u);
		} else {
			req.setAttribute("msg", "用户名或密码错误");
		}
		return url;
	}

	/**
	 * 退出登陆
	 * @param req
	 * @return
	 */
	@RequestMapping("/logout")
	public String logout(HttpServletRequest req) {
		req.getSession().removeAttribute("username");
		return "/login.jsp";
	}

	/**
	 * 删除用户
	 * @param req
	 * @param act
	 * @return
	 */
	@RequestMapping(value = "/deleteuser", params = "act")
	public String deleteUser(HttpServletRequest req, String act) {
		String url = "/system/user/queryuser.jsp";
		int count = service.delete(act);
		if (count > 0) {
			req.setAttribute("msg", "用户删除成功");
		} else {
			req.setAttribute("msg", "用户删除失败");
		}
		return url;
	}

	/**
	 * 用户信息显示
	 * @param req
	 * @param act
	 * @return
	 */
	@RequestMapping(value = "/updateuser", params = "act")
	public String updateUser(HttpServletRequest req, String act) {
		String url = "/system/user/updateuser.jsp";
		String[] values = act.split(",");
		req.setAttribute("uname", values[0]);
		req.setAttribute("pass", values[1]);
		req.setAttribute("powerOption", getPowerOptions(Integer.valueOf(values[2])));
		return url;
	}

	/**
	 * 修改用户
	 * @param req
	 * @param user
	 * @return
	 */
	@RequestMapping(value = "/updateuser")
	public String updateUser(HttpServletRequest req, User user) {
		String url = "/system/user/queryuser.jsp";
		int count;
		try {
			count = service.update(user);
		} catch (Exception e) {
			count = 0;
		}
		if (count > 0) {
			req.setAttribute("msg", "用户修改成功");
		} else {
			req.setAttribute("msg", "用户修改失败");
		}
		return url;
	}
	
	/**
	 * 用户上传头像
	 * @param req
	 * @param myfile
	 * @param user
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/alteruserimg")
	public String upload(HttpServletRequest req,MultipartFile heardImg,User user) throws IllegalStateException, IOException{
		String newname = "";
		String filename = heardImg.getOriginalFilename();
		User u2 = null;
		if(filename.length()>0){
			//生成随机文件名
			String suf = filename.substring(filename.lastIndexOf(".")); //文件拓展名
			newname = UUID.randomUUID()+suf;
			String path = "D:/userimg_upload";
			File f = new File(path,newname);
			heardImg.transferTo(f);
			User u = new User();
			u.setUname(user.getUname());
			u.setUrl(newname);
			//获取原有用户信息
			u2 = service.queryUser(user);
			System.out.println(u2);
			//进行头像信息更新
			service.alterUserImg(u);
			//删除原有文件
			new File(path,u2.getUrl()).delete();
		}
		req.getSession().getAttribute("user");
		req.setAttribute("msg", "头像修改成功,刷新页面生效");
		return "/system/main/right.jsp";
	}
	
	
	/**
	 * Ajax修改用户密码
	 * @param req
	 * @param user
	 * @param message
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/alteruser")
	@ResponseBody
	public User alterUser(HttpServletRequest req, @RequestBody User user) throws Exception {
		service.alterUser(user);
		User u = service.login(user);
		return u;
	}
	
	/**
	 * 增加用户
	 * @param req
	 * @param user
	 * @return
	 */
	@RequestMapping("/insertuser")
	public String insertUser(HttpServletRequest req, User user) {
		String url = "/system/user/adduser.jsp";
		int count;
		try {
			count = service.insert(user);
		} catch (Exception e) {
			count = 0;
		}
		if (count > 0) {
			req.setAttribute("msg", "用户增加成功");
		} else {
			req.setAttribute("msg", "用户增加失败");
		}
		return url;
	}

	/**
	 * 用户名有效性验证
	 * @param req
	 * @param user
	 * @param message
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/verifiction")
	@ResponseBody
	public Message verifiction(HttpServletRequest req, @RequestBody User user, Message message) throws Exception {
		List<User> users = service.verifiction(user);
		if (users.size() > 0) {
			message.setMessage("用户名已存在");
			req.setAttribute("messages", message);
		}
		return message;
	}

	/**
	 * 进入用户查询界面
	 * @param req
	 * @param user
	 * @return
	 */
	@RequestMapping("/queryuserAll")
	public String toQuery(HttpServletRequest req, User user) {
		req.getSession().setAttribute("powerOption", getPowerOptions(null));
		return "/system/user/queryuser.jsp";
	}

	/*// 用户查询--全部
	@RequestMapping("/queryuser")
	public String queryUser(HttpServletRequest req, User user) {
		String url = "/system/user/queryuser.jsp";
		List<User> users = service.queryAll(user);
		if (users != null) {
			req.setAttribute("name", user.getUname());
			req.setAttribute("powerOption", getPowerOptions(user.getPowerId()));
			req.getSession().setAttribute("users", users);
		}
		return url;
	}*/
	
	/**
	 * 分页查询实现
	 * @param req
	 * @param user
	 * @return
	 */
	@RequestMapping(value="/queryuser", params="act=query")
	public String query(HttpServletRequest req,User user){
		String str = "/system/user/queryuser.jsp";
		
		//获取一共有多少条记录
		int counts = service.queryCounts(user);
		
		//进行分页相关数据的计算-begin
		int pageNum = user.getPageNum();//当前第几页
		int pageCounts = user.getPageCounts();//每页多少条
		int pages = counts/pageCounts + (counts%pageCounts>0?1:0);//一共多少页
		if(pageNum<1){
			pageNum = 1;
		}
		if(pageNum>pages){
			pageNum = pages;
		}
		user.setPageNum(pageNum);
		user.setPageCounts(pageCounts);
		user.setPages(pages);
		user.setCounts(counts);
		//进行分页相关数据的计算-end
		
		//获取指定页的数据
		List<User> list = service.queryAllPage(user);
		req.setAttribute("name", user.getUname());
		req.setAttribute("powerOption", getPowerOptions(user.getPowerId()));
		req.getSession().setAttribute("users", list);
		
		return str;
	}

	/**
	 * 获取权限下拉列表
	 * @param powerId
	 * @return
	 */
	private String getPowerOptions(Integer powerId) {
		StringBuffer s = new StringBuffer();
		List<Power> options = powerService.queryAll(new Power());
		for (Power powerlist : options) {
			String value = powerlist.getPowerid() + "";
			String text = powerlist.getPowername();
			s.append("<option value='")
			 .append(value).append("' ")
			 .append(powerlist.getPowerid().equals(powerId) ? "selected='selected'" : "")
			 .append(">")
			 .append(text).append("</option>");
		}
		return s.toString();
	}

}
